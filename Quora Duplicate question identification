{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Venna-Sujith-Reddy/NLP-ALL-CODE-FROM-SCRATCH-/blob/main/Quora%20Duplicate%20question%20identification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kyrb3noHeSul"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7FY95rvehwQ",
        "outputId": "e1cb7f07-ea8e-469c-bd9f-d5c364068271"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-17-2686812291>:1: DtypeWarning: Columns (7,8,9,10,11) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df=pd.read_csv('q_quora.csv')\n"
          ]
        }
      ],
      "source": [
        "df=pd.read_csv('q_quora.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "ibZCkF2DejMR",
        "outputId": "1766d630-c8f4-4912-b440-5de53801d959"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-9f1148e2-2c4d-4730-84d7-765a748076fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>qid1</th>\n",
              "      <th>qid2</th>\n",
              "      <th>question1</th>\n",
              "      <th>question2</th>\n",
              "      <th>is_duplicate</th>\n",
              "      <th>Unnamed: 6</th>\n",
              "      <th>Unnamed: 7</th>\n",
              "      <th>Unnamed: 8</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "      <th>Unnamed: 10</th>\n",
              "      <th>Unnamed: 11</th>\n",
              "      <th>Unnamed: 12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>What is the step by step guide to invest in sh...</td>\n",
              "      <td>What is the step by step guide to invest in sh...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>What is the story of Kohinoor (Koh-i-Noor) Dia...</td>\n",
              "      <td>What would happen if the Indian government sto...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>How can I increase the speed of my internet co...</td>\n",
              "      <td>How can Internet speed be increased by hacking...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>Why am I mentally very lonely? How can I solve...</td>\n",
              "      <td>Find the remainder when [math]23^{24}[/math] i...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>Which one dissolve in water quikly sugar, salt...</td>\n",
              "      <td>Which fish would survive in salt water?</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f1148e2-2c4d-4730-84d7-765a748076fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f1148e2-2c4d-4730-84d7-765a748076fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f1148e2-2c4d-4730-84d7-765a748076fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-aa993466-9671-407f-a884-d0867b610fcd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa993466-9671-407f-a884-d0867b610fcd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-aa993466-9671-407f-a884-d0867b610fcd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   id  qid1  qid2                                          question1  \\\n",
              "0   0     1     2  What is the step by step guide to invest in sh...   \n",
              "1   1     3     4  What is the story of Kohinoor (Koh-i-Noor) Dia...   \n",
              "2   2     5     6  How can I increase the speed of my internet co...   \n",
              "3   3     7     8  Why am I mentally very lonely? How can I solve...   \n",
              "4   4     9    10  Which one dissolve in water quikly sugar, salt...   \n",
              "\n",
              "                                           question2 is_duplicate Unnamed: 6  \\\n",
              "0  What is the step by step guide to invest in sh...            0        NaN   \n",
              "1  What would happen if the Indian government sto...            0        NaN   \n",
              "2  How can Internet speed be increased by hacking...            0        NaN   \n",
              "3  Find the remainder when [math]23^{24}[/math] i...            0        NaN   \n",
              "4            Which fish would survive in salt water?            0        NaN   \n",
              "\n",
              "  Unnamed: 7 Unnamed: 8 Unnamed: 9 Unnamed: 10 Unnamed: 11  Unnamed: 12  \n",
              "0        NaN        NaN        NaN         NaN         NaN          NaN  \n",
              "1        NaN        NaN        NaN         NaN         NaN          NaN  \n",
              "2        NaN        NaN        NaN         NaN         NaN          NaN  \n",
              "3        NaN        NaN        NaN         NaN         NaN          NaN  \n",
              "4        NaN        NaN        NaN         NaN         NaN          NaN  "
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JzJTpMIUeq3K"
      },
      "outputs": [],
      "source": [
        "df = df.drop(['Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10', 'Unnamed: 11', 'Unnamed: 12'], axis=1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f0coExHnerpj"
      },
      "outputs": [],
      "source": [
        "df = df.dropna()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "-YSCogu_etrG",
        "outputId": "c1ce8d7d-1247-402d-e7b6-b96666b8d846"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>qid1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>qid2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>question1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>question2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_duplicate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "id              0\n",
              "qid1            0\n",
              "qid2            0\n",
              "question1       0\n",
              "question2       0\n",
              "is_duplicate    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "TDhv_3KSeu4F",
        "outputId": "9db6e599-c48a-4f22-d4c3-f0187e9a81c4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Convert 'is_duplicate' to numeric, coercing errors to NaN if necessary\n",
        "df['is_duplicate'] = pd.to_numeric(df['is_duplicate'], errors='coerce')\n",
        "# After conversion, you might want to drop rows with NaN in this column again\n",
        "df = df.dropna(subset=['is_duplicate'])\n",
        "\n",
        "# Now proceed with the plotting code\n",
        "fig, ax = plt.subplots()\n",
        "counts = df['is_duplicate'].value_counts()\n",
        "# Ensure the counts only include 0 and 1 after conversion and potential dropping\n",
        "counts_filtered = counts.loc[[0, 1]] if 0 in counts.index and 1 in counts.index else pd.Series(dtype='int64')\n",
        "bars = ax.bar(counts_filtered.index, counts_filtered.values, color=['blue', 'red'])\n",
        "ax.set_xticks(counts_filtered.index)\n",
        "ax.set_xticklabels(['0', '1'])\n",
        "ax.set_xlabel('is_duplicate')\n",
        "ax.set_ylabel('Frequency')\n",
        "ax.set_title('Frequency of 0s and 1s in is_duplicate')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "5k1SCzdOe4Ui",
        "outputId": "70f8411a-ccc0-4aaf-a045-0b1b7f48da0c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Count of 0s and 1s:\n",
            "is_duplicate\n",
            "0    254745\n",
            "1    149267\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Percentage of 0s and 1s:\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_duplicate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63.05382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>36.94618</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ],
            "text/plain": [
              "is_duplicate\n",
              "0    63.05382\n",
              "1    36.94618\n",
              "Name: count, dtype: float64"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: I also want the percentage and count of how many 1 and 0's are\n",
        "\n",
        "# Ensure the 'is_duplicate' column is numeric\n",
        "df['is_duplicate'] = pd.to_numeric(df['is_duplicate'], errors='coerce')\n",
        "\n",
        "# Drop rows where 'is_duplicate' became NaN after coercion\n",
        "df = df.dropna(subset=['is_duplicate'])\n",
        "\n",
        "# Convert the column to integer type after dropping NaNs\n",
        "df['is_duplicate'] = df['is_duplicate'].astype(int)\n",
        "\n",
        "# Filter to only include 0 and 1\n",
        "df_filtered = df[df['is_duplicate'].isin([0, 1])]\n",
        "\n",
        "# Calculate the count and percentage\n",
        "counts = df_filtered['is_duplicate'].value_counts()\n",
        "total_count = counts.sum()\n",
        "\n",
        "if total_count > 0:\n",
        "  percentage = (counts / total_count) * 100\n",
        "else:\n",
        "  percentage = pd.Series(0.0, index=[0, 1]) # Handle the case where there are no 0s or 1s\n",
        "\n",
        "print(\"Count of 0s and 1s:\")\n",
        "print(counts)\n",
        "print(\"\\nPercentage of 0s and 1s:\")\n",
        "percentage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e315yM9QfQdP",
        "outputId": "d4694bab-8536-47f3-da52-6bc009f2e3b6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(404012, 6)"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x2AvP7qvgYNC",
        "outputId": "fc88f695-f06f-49cb-eb30-f01fa1823f07"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Total number of unique questions: 789148\n",
            "Number of questions appearing more than once: 13675\n"
          ]
        }
      ],
      "source": [
        "# Take all qid1 and qid2 into a single list\n",
        "# Ensure qid1 and qid2 are treated as strings or a common type to avoid potential issues with mixed types\n",
        "all_qids = pd.concat([df['qid1'].astype(str), df['qid2'].astype(str)], ignore_index=True)\n",
        "\n",
        "# Find the unique question IDs\n",
        "unique_qids = all_qids.unique()\n",
        "\n",
        "# Calculate the frequency of each question ID\n",
        "qid_counts = all_qids.value_counts()\n",
        "\n",
        "# Find the number of questions that appeared more than once\n",
        "# These are the question IDs where the count is greater than 1\n",
        "questions_appearing_more_than_once = qid_counts[qid_counts > 1].index\n",
        "\n",
        "# Get the count of unique questions\n",
        "num_unique_questions = len(unique_qids)\n",
        "\n",
        "# Get the count of questions that appeared more than once\n",
        "num_questions_appearing_more_than_once = len(questions_appearing_more_than_once)\n",
        "\n",
        "print(f\"Total number of unique questions: {num_unique_questions}\")\n",
        "print(f\"Number of questions appearing more than once: {num_questions_appearing_more_than_once}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mdcGTPeHlrMp"
      },
      "outputs": [],
      "source": [
        "new_df=df.sample(50000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eRB6EUZj4ZIK",
        "outputId": "0f896134-1381-456d-babb-1ebcdc00fae7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Shape of transformed question1 array: (50000, 3000)\n",
            "Shape of transformed question2 array: (50000, 3000)\n",
            "Shape of combined features array: (50000, 6000)\n"
          ]
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Assuming 'new_df' DataFrame is already loaded and processed as in the previous cells\n",
        "\n",
        "# Create the corpus list by combining question1 and question2 text\n",
        "corpus_list = pd.concat([new_df['question1'], new_df['question2']], axis=0).astype(str).tolist()\n",
        "\n",
        "# Initialize CountVectorizer with max_features\n",
        "vectorizer = CountVectorizer(max_features=3000)\n",
        "\n",
        "# Fit the vectorizer on the combined corpus to build the vocabulary\n",
        "vectorizer.fit(corpus_list)\n",
        "\n",
        "# Transform question1 column into a 2D array\n",
        "q1_transformed = vectorizer.transform(new_df['question1'].astype(str)).toarray()\n",
        "\n",
        "# Transform question2 column into a 2D array\n",
        "q2_transformed = vectorizer.transform(new_df['question2'].astype(str)).toarray()\n",
        "\n",
        "# Concatenate the two 2D arrays side-by-side\n",
        "# Use axis=1 to concatenate along the columns\n",
        "combined_features = np.concatenate([q1_transformed, q2_transformed], axis=1)\n",
        "\n",
        "print(\"Shape of transformed question1 array:\", q1_transformed.shape)\n",
        "print(\"Shape of transformed question2 array:\", q2_transformed.shape)\n",
        "print(\"Shape of combined features array:\", combined_features.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZrFsV7cIHnUl",
        "outputId": "ee016e05-de31-4600-a9c2-7e6dc01ef5a6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (2.1.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.0.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.15.3)\n",
            "--- Running Random Forest ---\n",
            "Random Forest Accuracy: 0.753\n",
            "Random Forest Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.75      0.91      0.82      6272\n",
            "           1       0.77      0.48      0.59      3728\n",
            "\n",
            "    accuracy                           0.75     10000\n",
            "   macro avg       0.76      0.70      0.71     10000\n",
            "weighted avg       0.76      0.75      0.74     10000\n",
            "\n",
            "Random Forest Confusion Matrix:\n",
            " [[5731  541]\n",
            " [1929 1799]]\n",
            "\n",
            "--- Running XGBoost ---\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [17:22:15] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "XGBoost Accuracy: 0.728\n",
            "XGBoost Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      0.91      0.81      6272\n",
            "           1       0.74      0.42      0.54      3728\n",
            "\n",
            "    accuracy                           0.73     10000\n",
            "   macro avg       0.73      0.67      0.67     10000\n",
            "weighted avg       0.73      0.73      0.71     10000\n",
            "\n",
            "XGBoost Confusion Matrix:\n",
            " [[5704  568]\n",
            " [2152 1576]]\n"
          ]
        }
      ],
      "source": [
        "# prompt: now  run random forest and xg boost on this\n",
        "\n",
        "!pip install xgboost\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Assuming 'combined_features' is your feature matrix and 'new_df' contains the target variable 'is_duplicate'\n",
        "X = combined_features\n",
        "y = new_df['is_duplicate']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# --- Random Forest Classifier ---\n",
        "print(\"--- Running Random Forest ---\")\n",
        "# Initialize the Random Forest classifier\n",
        "rf_clf = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "rf_clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "rf_predictions = rf_clf.predict(X_test)\n",
        "\n",
        "# Evaluate the Random Forest model\n",
        "print(\"Random Forest Accuracy:\", accuracy_score(y_test, rf_predictions))\n",
        "print(\"Random Forest Classification Report:\\n\", classification_report(y_test, rf_predictions))\n",
        "print(\"Random Forest Confusion Matrix:\\n\", confusion_matrix(y_test, rf_predictions))\n",
        "\n",
        "# --- XGBoost Classifier ---\n",
        "print(\"\\n--- Running XGBoost ---\")\n",
        "# Initialize the XGBoost classifier\n",
        "xgb_clf = xgb.XGBClassifier(objective='binary:logistic', use_label_encoder=False, eval_metric='logloss', random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "xgb_clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "xgb_predictions = xgb_clf.predict(X_test)\n",
        "\n",
        "# Evaluate the XGBoost model\n",
        "print(\"XGBoost Accuracy:\", accuracy_score(y_test, xgb_predictions))\n",
        "print(\"XGBoost Classification Report:\\n\", classification_report(y_test, xgb_predictions))\n",
        "print(\"XGBoost Confusion Matrix:\\n\", confusion_matrix(y_test, xgb_predictions))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BMM5xh3CACa",
        "outputId": "408a00df-ded3-4cbe-ab30-1d9d7ede1a57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Shape of combined features with new features: (50000, 6007)\n",
            "\n",
            "--- Running XGBoost with New Features ---\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [17:23:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        }
      ],
      "source": [
        "# prompt: now I want to add more features to the data and then run the xg boost again\n",
        "# feature 1 =character length of q1 ( You get this by taking the whole sentence of question col and apply str.len())\n",
        "# feature 2 =character length of q2 (same you get this by apply str.length)\n",
        "# feature 3=no of words in  q1 (splot and count form the list )\n",
        "# feature 4=no of words in  q2 (splot and count from thelist)\n",
        "# feature 5=no of common unique words in both q1 and q2 ( so for this how do calculate first use map function then map strip and lowercase on each word of row, then send them to set so you will 2 set for q1 and q2 after that you can use & to get teh common unique words length)\n",
        "# feature 6= total no of words combined q1 and q2 ( add the column of no of words in q1 and q2 to get the total count)\n",
        "# feature 7 = words share (common words/total)  ( feature 5 / feature 6 )\n",
        "\n",
        "# Add new features\n",
        "new_df['q1_len'] = new_df['question1'].astype(str).apply(len)\n",
        "new_df['q2_len'] = new_df['question2'].astype(str).apply(len)\n",
        "new_df['q1_n_words'] = new_df['question1'].astype(str).apply(lambda x: len(x.split()))\n",
        "new_df['q2_n_words'] = new_df['question2'].astype(str).apply(lambda x: len(x.split()))\n",
        "\n",
        "def common_unique_words(row):\n",
        "    q1_words = set(map(lambda x: x.strip().lower(), str(row['question1']).split()))\n",
        "    q2_words = set(map(lambda x: x.strip().lower(), str(row['question2']).split()))\n",
        "    return len(q1_words & q2_words)\n",
        "\n",
        "new_df['common_unique_words'] = new_df.apply(common_unique_words, axis=1)\n",
        "new_df['total_words'] = new_df['q1_n_words'] + new_df['q2_n_words']\n",
        "new_df['words_share'] = new_df['common_unique_words'] / (new_df['total_words'] + 1e-9) # Add small epsilon to avoid division by zero\n",
        "\n",
        "# Select the new features and the existing combined text features\n",
        "X_new_features = new_df[['q1_len', 'q2_len', 'q1_n_words', 'q2_n_words', 'common_unique_words', 'total_words', 'words_share']].values\n",
        "\n",
        "# Concatenate the new features with the combined_features\n",
        "X_combined_with_new_features = np.concatenate([combined_features, X_new_features], axis=1)\n",
        "\n",
        "print(\"Shape of combined features with new features:\", X_combined_with_new_features.shape)\n",
        "\n",
        "# Assuming 'X_combined_with_new_features' is your expanded feature matrix\n",
        "X = X_combined_with_new_features\n",
        "y = new_df['is_duplicate']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# --- XGBoost Classifier with expanded features ---\n",
        "print(\"\\n--- Running XGBoost with New Features ---\")\n",
        "# Initialize the XGBoost classifier\n",
        "# Use the same parameters as before\n",
        "xgb_clf_new_features = xgb.XGBClassifier(objective='binary:logistic', use_label_encoder=False, eval_metric='logloss', random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "xgb_clf_new_features.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "xgb_predictions_new_features = xgb_clf_new_features.predict(X_test)\n",
        "\n",
        "# Evaluate the XGBoost model\n",
        "print(\"XGBoost Accuracy with New Features:\", accuracy_score(y_test, xgb_predictions_new_features))\n",
        "print(\"XGBoost Classification Report with New Features:\\n\", classification_report(y_test, xgb_predictions_new_features))\n",
        "print(\"XGBoost Confusion Matrix with New Features:\\n\", confusion_matrix(y_test, xgb_predictions_new_features))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "uUV824vYcP2d"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPnelXyS+/UDabx7/kcMHpH",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}